// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TreeService.Data;

#nullable disable

namespace TreeService.Migrations
{
    [DbContext(typeof(TreeContext))]
    partial class TreeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Models.Node", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentNodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TreeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentNodeId");

                    b.HasIndex("TreeId", "ParentNodeId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Nodes_Tree_Parent_Name");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Common.Models.Tree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("TreeService.Data.NodeClosure", b =>
                {
                    b.Property<long>("AncestorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DescendantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.HasKey("AncestorId", "DescendantId");

                    b.ToTable("NodeClosures");
                });

            modelBuilder.Entity("Common.Models.Node", b =>
                {
                    b.HasOne("Common.Models.Node", "ParentNode")
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeId");

                    b.HasOne("Common.Models.Tree", "Tree")
                        .WithMany("Nodes")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentNode");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("Common.Models.Node", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Common.Models.Tree", b =>
                {
                    b.Navigation("Nodes");
                });
#pragma warning restore 612, 618
        }
    }
}
